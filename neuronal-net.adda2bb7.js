parcelRequire=function(e,r,t,n){var i,o="function"==typeof parcelRequire&&parcelRequire,u="function"==typeof require&&require;function f(t,n){if(!r[t]){if(!e[t]){var i="function"==typeof parcelRequire&&parcelRequire;if(!n&&i)return i(t,!0);if(o)return o(t,!0);if(u&&"string"==typeof t)return u(t);var c=new Error("Cannot find module '"+t+"'");throw c.code="MODULE_NOT_FOUND",c}p.resolve=function(r){return e[t][1][r]||r},p.cache={};var l=r[t]=new f.Module(t);e[t][0].call(l.exports,p,l,l.exports,this)}return r[t].exports;function p(e){return f(p.resolve(e))}}f.isParcelRequire=!0,f.Module=function(e){this.id=e,this.bundle=f,this.exports={}},f.modules=e,f.cache=r,f.parent=o,f.register=function(r,t){e[r]=[function(e,r){r.exports=t},{}]};for(var c=0;c<t.length;c++)try{f(t[c])}catch(e){i||(i=e)}if(t.length){var l=f(t[t.length-1]);"object"==typeof exports&&"undefined"!=typeof module?module.exports=l:"function"==typeof define&&define.amd?define(function(){return l}):n&&(this[n]=l)}if(parcelRequire=f,i)throw i;return f}({"eBMD":[function(require,module,exports) {
"use strict";function e(e){const t={next:e,[Symbol.iterator]:()=>t};return t}function t(t,r){return e(()=>{const e=t.next(),n=e.done,o=e.value;return{done:n,value:n?void 0:r(o)}})}Object.defineProperty(exports,"__esModule",{value:!0}),exports.produceIteratorAndIterable=e,exports.extendIterable=t;
},{}],"SvSn":[function(require,module,exports) {
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.NeuronalNetSimple=void 0;var e=require("./iterator-helper");const t=(e,...n)=>{if(1==n.length)return new Array(n[0]).fill(e);const r=new Array(n[0]),i=n.slice(1);for(let o=0;o<n[0];o++)r[o]=t(e,...i);return r};class n{constructor(e,n,r=1){this.inNumber=e,this.outNumber=n,this.defaultWeight=r,this.backing=t(r,e*n),Object.freeze(this)}checkRange(e,t){if(!Number.isInteger(e))throw new TypeError(t+" needs to be an integer");if(e<0)throw new RangeError(t+" needs to be greater or equal to 0");const n=this[t+"Number"];if(e>=n)throw new RangeError(t+" needs to be less than "+n)}get(e,t){return this.checkRange(e,"in"),this.checkRange(t,"out"),this.backing[this.outNumber*e+t]}set(e,t,n){return this.checkRange(e,"in"),this.checkRange(t,"out"),this.backing[this.outNumber*e+t]=n}}class r{constructor(e,t=1,r=1){if(this.layerDefinition=e,this.learningRate=t,e.length<2)throw new RangeError("layerDefinition need to have at least two layers (input and output layer)");this.weights=[];for(let i=1;i<e.length;i++){const t=e[i-1],o=e[i],s=new n(t+1,o,r);this.weights.push(s);for(let e=0;e<o;e++)s.set(0,e,-r)}}applyInput(e){if(e.length!=this.layerDefinition[0])throw new RangeError("inputValues needs to be the same length as "+this.layerDefinition[0]);let t=e;for(const n of this.weights){const e=new Array(n.outNumber);for(let r=0;r<e.length;r++){let i=n.get(0,r);for(let e=1;e<n.inNumber;e++)i+=n.get(e,r)*t[e-1];e[r]=this.activationFunction(i)}t=e}return t}supervisedOnlineLearning(e){const n=t(0,e.length,e[1].length);if(this.layerDefinition.length>2)throw new RangeError("can not learn for hidden layers");for(let t=0;t<e.length;t++){const r=e[t][0],i=e[t][1],o=this.weights[0],s=this.applyInput(r);if(i.length!=s.length)throw new RangeError("expected was another length then the actual result");for(let e=0;e<s.length;e++){const a=i[e],h=s[e];if(h!=a){n[t][e]++;for(let t=0;t<o.inNumber;t++){const n=0==t?1:r[t-1],i=o.get(t,e)+this.learningRate*(a-h)*n;o.set(t,e,i)}}}}return n}trainWithDataSet(t,n=1/0){let r,i=0;return(0,e.produceIteratorAndIterable)(()=>{let e=!1;e:for(const t of r)for(const n of t)if(n>0){e=!0;break e}return e?i>=n?{done:!0,value:"aborted"}:{done:!1,value:{testingResult:r=this.supervisedOnlineLearning(t),remainingTries:n-++i}}:{done:!0,value:"resolved"}})}trainTillFinished(e,t=1/0){const n=this.trainWithDataSet(e,t);for(;;){const e=n.next();if(e.done)return e.value}}}class i extends r{activationFunction(e){return e>=0?1:0}}exports.NeuronalNetSimple=i;
},{"./iterator-helper":"eBMD"}],"hQ7e":[function(require,module,exports) {
"use strict";var t=require("./neuronal-net-helper");const n=t=>"["+t.join(", ")+"]",o=new t.NeuronalNetSimple([2,1],1),e=o.applyInput([0,1]);console.log(e);const s=[[[0,1],[1]],[[-1,1],[0]],[[1,1],[1]],[[0,-4],[1]],[[-2,-2],[1]]];for(const l of o.trainWithDataSet(s))console.log("trainingResult",l.testingResult);s.push([[-8,2],[0]]),s.push([[200,2],[1]]),s.push([[-900,2],[0]]),s.push([[-.001,2],[0]]);for(const l of s){const t=l[0],e=l[1],s=o.applyInput(t);console.log(n(t)+" should result in "+n(e)+" but resulted in "+n(s))}
},{"./neuronal-net-helper":"SvSn"}]},{},["hQ7e"], null)